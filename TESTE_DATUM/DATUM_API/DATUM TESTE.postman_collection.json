{
	"info": {
		"_postman_id": "11ea1f96-a7cb-4dd4-8aea-d00a5be9914f",
		"name": "DATUM TESTE",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "TESTE DE POST",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"eval(pm.environment.get(\"postmanBDD\"));\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"describe('Validação de critérios', () => {\r",
							"\r",
							"    it('Validar nome criado', () => {\r",
							"        let namePerson = jsonData.name;\r",
							"        expect(\"morpheus\").to.eql(namePerson);\r",
							"    });\r",
							"\r",
							"    it('Validar job criado', () => {\r",
							"        let jobPerson = jsonData.job;\r",
							"        expect(\"leader\").to.eql(jobPerson);\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"leader\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET SINGLE USER",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"eval(pm.environment.get(\"postmanBDD\"));\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"describe('Validação de critérios', () => {\r",
							"\r",
							"    it('Validar e-mail', () => {\r",
							"        let ValidEmail = jsonData.data.email;\r",
							"        expect(\"janet.weaver@reqres.in\").to.eql(ValidEmail);\r",
							"    });\r",
							"\r",
							"    it('Validar Primeiro nome', () => {\r",
							"        let PrimeName = jsonData.data.first_name;\r",
							"        expect(\"Janet\").to.eql(PrimeName);\r",
							"    });\r",
							"\r",
							"    it('Validar Segundo nome', () => {\r",
							"        let SecName = jsonData.data.last_name;\r",
							"        expect(\"Weaver\").to.eql(SecName);\r",
							"    });\r",
							"\r",
							"    it('Validar texto do suporte', () => {\r",
							"        let SupText = jsonData.support.text;\r",
							"        expect(\"To keep ReqRes free, contributions towards server costs are appreciated!\").to.eql(SupText);\r",
							"    });\r",
							"\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users/2",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET LIST USERS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"eval(pm.environment.get(\"postmanBDD\"));\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"describe('Validação de critérios', () => {\r",
							"\r",
							"    it('Validar que existem 6 objetos no array \"data\"',() => {\r",
							"        let ArrObj = jsonData.data;\r",
							"        expect(ArrObj).to.have.lengthOf(6);\r",
							"    });\r",
							"\r",
							"    let Nambyron = jsonData.data[3].first_name;\r",
							"    it('validar usuário Byron', () =>{\r",
							"        expect(\"Byron\").to.eql(Nambyron)\r",
							"    })\r",
							"\r",
							"    it('Validar texto do suporte', () => {\r",
							"        let SupText = jsonData.support.text;\r",
							"        expect(\"To keep ReqRes free, contributions towards server costs are appreciated!\").to.eql(SupText);\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users?page=2",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "TESTE DE PATCH",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"eval(pm.environment.get(\"postmanBDD\"));\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"describe('Validação de critérios', () => {\r",
							"\r",
							"    it('Validar nome criado', () => {\r",
							"        let namePerson = jsonData.name;\r",
							"        expect(\"morpheus\").to.eql(namePerson);\r",
							"    });\r",
							"\r",
							"    it('Validar job criado', () => {\r",
							"        let jobPerson = jsonData.job;\r",
							"        expect(\"zion resident\").to.eql(jobPerson);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users/2",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		}
	]
}